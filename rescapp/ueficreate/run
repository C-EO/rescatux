#!/bin/bash
# Rescapp Update-grub run script
# Copyright (C) 2012,2013,2014,2015,2016 Adrian Gibanel Lopez
#
# Rescapp is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rescapp is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Rescapp.  If not, see <http://www.gnu.org/licenses/>.

source ${RESCATUX_LIB_FILE}
set -x
set -v

# Let the user choose his main EFI System partition
# It outputs choosen partition
function rtux_Choose_EFI_System_partition () {
  rtux_Abstract_Choose_Partition $(rtux_Get_EFI_System_Partitions)
} # function rtux_Choose_EFI_System_partition ()

function rtux_Get_EFI_System_Partitions() {
  GET_EFI_SYSTEM_PARTITIONS_RUNNING_STR="Getting EFI System partitions."
  rtux_Run_Show_Progress "${GET_EFI_SYSTEM_PARTITIONS_RUNNING_STR}" rtux_Get_EFI_System_Partitions_payload "$@"
} # function rtux_Get_EFI_System_Partitions ()


# Return partitions which are EFI System partitions
function rtux_Get_EFI_System_Partitions_payload() {
  local TARGET_PARTITIONS=$(rtux_Get_System_Partitions)
  local EFI_SYSTEM_PARTITIONS=""

  for n_partition in ${TARGET_PARTITIONS}; do
    n_hard_disk="$(echo ${n_partition} | sed 's/[0-9]*$//g' 2> /dev/null)"
    if fdisk -lu /dev/${n_hard_disk} \
         | grep '^/dev/'"${n_partition}"'\+[[:space:]]\+' \
         | grep "${FDISK_EFI_SYSTEM_DETECTOR}"'$' \
         > /dev/null 2>&1 ; then
      EFI_SYSTEM_PARTITIONS="${EFI_SYSTEM_PARTITIONS} ${n_partition}"
    fi
  done

  echo "${EFI_SYSTEM_PARTITIONS}"
} # function rtux_Get_EFI_System_Partitions_payload ()


# $1 : Uefi EFI Partition # sda2
# $2 : EFI relative Complete File path # EFI/Boot/bootx64.efi
# Update UEFI Boot Order
function rtux_UEFI_Add_Boot_Entry () {
# TODO: Extract last user interaction (Success/Failure)
# So that this function returns being successful or not

  local EXIT_VALUE=1 # Error by default

  local UEFI_EFI_PARTITION="$1"
  local UEFI_EFI_RELATIVE_FILEPATH="$2"

  # TODO: Check if we are in UEFI system and warn the user

  # Convert EFI PARTITION into EFI disk
  local TMP_UEFI_EFI_DISK="$(echo ${UEFI_EFI_PARTITION} | sed 's/[0-9]*$//g')" # sda21 -> sda
  local UEFI_EFI_DISK="/dev/${TMP_UEFI_EFI_DISK}"

  # Convert EFI PARTITION into partition number
  local UEFI_EFI_PARTITION_NUMBER="$(echo ${UEFI_EFI_PARTITION} | grep -o '[0-9]*$')"
  # Convert File path into EFI ready file path
  local UEFI_EFI_READY_FILEPATH="\\$(echo ${UEFI_EFI_RELATIVE_FILEPATH} \
                                       | sed 's~/~\\~g' \
                                       | tr '[:upper:]' '[:lower:]')" # EFI/Boot/bootx64.efi -> \efi\boot\bootx64.efi
  # Convert File path into EFI label
  local UEFI_EFI_LABEL="${UEFICREATE_BOOT_ENTRY_PREFIX}${UEFI_EFI_READY_FILEPATH}"

  ${EFIBOOTMGR_BINARY} \
    -c \
    -d "${UEFI_EFI_DISK}" \
    -p ${UEFI_EFI_PARTITION_NUMBER} \
    -L "${UEFI_EFI_LABEL}" \
    -l "${UEFI_EFI_READY_FILEPATH}"

  # efibootmgr -c -d /dev/sda -p 2 -L "Gentoo" -l "\efi\boot\bootx64.efi"
  EXIT_VALUE=$?

  return ${EXIT_VALUE}

} # function rtux_UEFI_Add_Boot_Entry ()


# MAIN PROGRAM

UEFICREATE_OK_STR="New UEFI Boot entry was added OK! :)"
UEFICREATE_KO_STR="New UEFI Boot entry addition went wrong! :("
UEFICREATE_RUNNING_STR="Adding new UEFI Boot entry."
UEFICREATE_BOOT_ENTRY_PREFIX="(Rescapp added) "

FDISK_EFI_SYSTEM_DETECTOR="EFI System"

if rtux_Run_Show_Progress "${UEFICREATE_RUNNING_STR}" rtux_UEFI_Add_Boot_Entry "$(rtux_Choose_EFI_System_partition)" "EFI/Boot/bootx64.efi";
# if rtux_Run_Show_Progress "${UEFICREATE_RUNNING_STR}" rtux_UEFI_Add_Boot_Entry $(rtux_Choose_UEFI_Add_Boot_Entry);
then
  rtux_Message_Success ${UEFICREATE_OK_STR}
else
  rtux_Message_Failure ${UEFICREATE_KO_STR}
fi


#
