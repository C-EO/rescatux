#!/bin/bash
# Rescapp Update-grub run script
# Copyright (C) 2012 Adrian Gibanel Lopez
#
# Rescapp is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rescapp is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Rescapp.  If not, see <http://www.gnu.org/licenses/>.

source ${RESCATUX_LIB_FILE}
set -x
set -v


# Update Grub configuration file from the choosen Linux partition
# 1 parametre = Selected partition
# While it is being run user is shown the hard disks
# and it is asked to order them
function rtux_Grub_Update_Config () {
# TODO: Extract last user interaction (Success/Failure)
# So that this function returns being successful or not

  local EXIT_VALUE=1 # Error by default
  local SELECTED_PARTITION=$1;
  local n_partition=${SELECTED_PARTITION}

  local TMP_MNT_PARTITION=${RESCATUX_ROOT_MNT}/${n_partition}
  local TMP_DEV_PARTITION=/dev/${n_partition}
  mkdir --parents ${TMP_MNT_PARTITION}

  if $(mount -t auto ${TMP_DEV_PARTITION} ${TMP_MNT_PARTITION} 2> /dev/null)
    then
    mount -o bind /dev ${TMP_MNT_PARTITION}/dev
    mount -o bind /proc ${TMP_MNT_PARTITION}/proc
    mount -o bind /sys ${TMP_MNT_PARTITION}/sys

    if [[ -e ${TMP_MNT_PARTITION}${LINUX_OS_DETECTOR} ]] ; then
      rtux_File_Reordered_Device_Map \
      > ${TMP_MNT_PARTITION}/${DEVICE_MAP_RESCATUX_STR}


      # TODO: Improve with a cat command ended with a EOF mark
      local TMP_SCRIPT="/tmp/$$.sh"
      local TMP_MNT_PARTITION_SCRIPT="${TMP_MNT_PARTITION}${TMP_SCRIPT}"

      rtux_File_Chroot_Script_Device_Map \
      "if ${UPDATE_GRUB_BINARY} --version ; then " \
      "${UPDATE_GRUB_BINARY} ; "\
      "elif update-grub2 --version ; " \
      "then update-grub2 ; " \
      "elif grub2-mkconfig --version ; " \
      "then grub2-mkconfig -o /boot/grub2/grub.cfg ;"\
      "else grub-mkconfig -o /boot/grub/grub.cfg ; "\
      "fi" \
      > ${TMP_MNT_PARTITION}${TMP_SCRIPT}

      chmod +x ${TMP_MNT_PARTITION_SCRIPT}

      # TODO: Let the user use other than now hard-coded /bin/bash
      chroot ${TMP_MNT_PARTITION} /bin/bash ${TMP_SCRIPT}
      EXIT_VALUE=$?
      mount -t auto -o remount,rw ${TMP_DEV_PARTITION} ${TMP_MNT_PARTITION} # Workaround
      rm ${TMP_MNT_PARTITION_SCRIPT}
		

    fi # Linux detector was found
    umount ${TMP_MNT_PARTITION}/sys
    umount ${TMP_MNT_PARTITION}/proc
    umount ${TMP_MNT_PARTITION}/dev
    umount ${TMP_MNT_PARTITION};
  fi # Partition was mounted ok

  return ${EXIT_VALUE}

} # function rtux_Grub_Update_Config ()


# TODO: Program check runtime (Maybe to be stolen from bootinfoscript)



UPDATE_GRUB_BINARY=update-grub

# MAIN PROGRAM


UPDATE_GRUB_OK_STR="Grub configuration was updated OK! :)"
UPDATE_GRUB_KO_STR="Grub configuration update went wrong! :("

if rtux_Grub_Update_Config $(rtux_Choose_Linux_partition) ; then
  rtux_Message_Success ${UPDATE_GRUB_OK_STR}
else
  rtux_Message_Failure ${UPDATE_GRUB_KO_STR}
fi


#
